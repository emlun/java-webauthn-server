buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.cinnober.gradle:semver-git:2.5.0'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.10.0'
    classpath 'io.github.cosmicsilence:gradle-scalafix:0.1.13'
  }
}
plugins {
  id 'java-platform'
  id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

import io.franzbecker.gradle.lombok.LombokPlugin
import io.franzbecker.gradle.lombok.task.DelombokTask

rootProject.description = "Metadata root for the com.yubico:webauthn-server-* module family"

project.ext.isCiBuild = System.env.CI == 'true'

wrapper {
  gradleVersion = '7.3'
}

dependencies {
  constraints {
    api('com.augustcellars.cose:cose-java:[1.0.0,2)')
    api('com.fasterxml.jackson.core:jackson-databind:[2.13.2.1,3)')
    api('com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:[2.13.2,3)')
    api('com.fasterxml.jackson.datatype:jackson-datatype-jdk8:[2.13.2,3)')
    api('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:[2.13.2,3)')
    api('com.fasterxml.jackson:jackson-bom') {
      version {
        strictly '[2.13.2.1,3)'
        reject '2.13.2.1'
      }
      because 'jackson-databind 2.13.2.1 references nonexistent BOM'
    }
    api('com.google.guava:guava:[24.1.1,31)')
    api('com.upokecenter:cbor:[4.5.1,5)')
    api('javax.ws.rs:javax.ws.rs-api:[2.1,3)')
    api('javax.xml.bind:jaxb-api:[2.3.0,3)')
    api('junit:junit:[4.12,5)')
    api('org.apache.httpcomponents:httpclient:[4.5.2,5)')
    api('org.bouncycastle:bcpkix-jdk15on:[1.62,2)')
    api('org.bouncycastle:bcprov-jdk15on:[1.62,2)')
    api('org.eclipse.jetty:jetty-servlet:[9.4.9.v20180320,10)')
    api('org.glassfish.jersey.containers:jersey-container-servlet-core:[2.33,3)')
    api('org.glassfish.jersey.containers:jersey-container-servlet:[2.33,3)')
    api('org.glassfish.jersey.inject:jersey-hk2:[2.33,3)')
    api('org.mockito:mockito-core:[2.27.0,3)')
    api('org.scalacheck:scalacheck_2.13:[1.14.0,2)')
    api('org.scalatest:scalatest_2.13:[3.0.8,3.1)')
    api('org.slf4j:slf4j-api:[1.7.25,2)')
    api('uk.org.lidalia:slf4j-test:[1.1.0,2)')
  }
}

allprojects {
  ext.snapshotSuffix = "<count>.g<sha>-SNAPSHOT<dirty>"
  ext.dirtyMarker = "-DIRTY"

  apply plugin: 'com.cinnober.gradle.semver-git'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'idea'

  group = 'com.yubico'

  idea.module {
    downloadJavadoc = true
    downloadSources = true
  }
}

subprojects {
  apply plugin: LombokPlugin

  lombok {
    version '1.18.20'
    sha256 = 'ce947be6c2fbe759fbbe8ef3b42b6825f814c98c8853f1013f2d9630cedf74b0'
  }
  tasks.withType(AbstractCompile) {
    if (tasks.findByName('verifyLombok')) {
      dependsOn tasks.verifyLombok
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  spotless {
    java {
      googleJavaFormat()
    }
    scala {
      scalafmt('2.6.3').configFile(rootProject.file('scalafmt.conf'))
    }
  }
}

allprojects {
  evaluationDependsOnChildren()
}

task assembleJavadoc(type: Sync) {
  from("docs/index.html") {
    expand project.properties
  }
  destinationDir = file("${rootProject.buildDir}/javadoc")
}

String getGitCommit() {
  def proc = "git rev-parse HEAD".execute(null, projectDir)
  proc.waitFor()
  if (proc.exitValue() != 0) {
    return null
  }
  return proc.text.trim()
}

String getGitCommitOrUnknown() {
  return getGitCommit() ?: 'UNKNOWN'
}

subprojects { project ->

  if (project.plugins.hasPlugin('scala')) {
    project.scalafix {
      configFile = rootProject.file('scalafix.conf')

      // Work around dependency resolution issues in April 2022
      semanticdb {
        autoConfigure = true
        version = '4.5.5'
      }
    }
    dependencies.scalafix('com.github.liancheng:organize-imports_2.13:0.6.0')
    project.tasks.spotlessApply.dependsOn(project.tasks.scalafix)
    project.tasks.spotlessCheck.dependsOn(project.tasks.checkScalafix)
    project.tasks.scalafix.finalizedBy(project.tasks.spotlessApply)
    project.tasks.checkScalafix.finalizedBy(project.tasks.spotlessCheck)
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }
  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ['-Wunused']
  }

  tasks.withType(AbstractArchiveTask) {
    from(rootProject.file('COPYING'))
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  tasks.withType(Sign) {
    it.dependsOn check
  }

  tasks.withType(AbstractTestTask) {
    testLogging {
      showStandardStreams = isCiBuild
    }
  }

}

task pitestMerge(type: com.yubico.gradle.pitest.tasks.PitestMergeTask)
